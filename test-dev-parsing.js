const { PyProjectParser } = require('./out/parsers/pyProjectParser');
const { VersionChecker } = require('./out/versionChecker');

async function testDevVersionParsing() {
    console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ dev-–≤–µ—Ä—Å–∏–π ===\n');
    
    const parser = new PyProjectParser();
    const versionChecker = new VersionChecker();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    const fs = require('fs');
    const originalContent = fs.readFileSync('pyproject.toml', 'utf8');
    
    try {
        // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        fs.copyFileSync('test-dev-versions.toml', 'pyproject.toml');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const dependencies = parser.parseDependencies('.');
        
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –≤–µ—Ä—Å–∏–π:');
        dependencies.forEach(dep => {
            console.log(`- ${dep.name}: ${dep.requestedVersion}`);
        });
        
        console.log('\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π ===\n');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–µ—Ä—Å–∏–π
        const testCases = [
            { current: '25.1', latest: '25.1' },
            { current: '25.1', latest: '25.2' },
            { current: '18.0.1.dev0', latest: '18.0.1.dev0' },
            { current: '18.0.1.dev0', latest: '18.0.1' },
            { current: '1.2.3a1', latest: '1.2.3a1' },
            { current: '1.2.3a1', latest: '1.2.3' },
            { current: '2.0.0b2', latest: '2.0.0b2' },
            { current: '3.1.0rc1', latest: '3.1.0' }
        ];
        
        for (const testCase of testCases) {
            const result = await versionChecker.getLatestVersion('test-package', testCase.current);
            if (result) {
                // –°–∏–º—É–ª–∏—Ä—É–µ–º latest –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
                result.latestVersion = testCase.latest;
                result.isUpToDate = testCase.current === testCase.latest;
                result.isOutdated = !result.isUpToDate;
                
                const status = result.isUpToDate ? '‚úÖ Up-to-date' : 'üî¥ Outdated';
                console.log(`${testCase.current} vs ${testCase.latest}: ${status}`);
            }
        }
        
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync('pyproject.toml', originalContent);
    }
    
    console.log('\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===');
}

testDevVersionParsing().catch(console.error); 